---
layout: post
title: "Iva&Pav题解"
date:   2023-09-27
comments: true
toc: true
tags: [题解]
author: NY2025xyc
---

### 算法

- ST 表
- 二分查找

---

### 思路

如上提到了两个知识，我们可以思考为何要使用它们。

以下为笔者的赛时思路过程：

1. 区间 $[l, r]$ 求与后的值，一定小于等于 $[l, r + 1]$（与上一个数，原数只会变小或不变，不会变大）。
2. 对于固定的点 $l$，$f(l, r)$ 相关于 $r$ 具有单调性。
3. 需要快速求出所有 $f(l, r)$ 的值。
4. 与运算中，重复与上一个数多次，对结果没有影响，因此此处为可重复贡献问题。
5. 此处为静态区间，多次访问 $f(l, r)$，可以使用 ST 表维护。

所以总体思路框架如下：

- `Step 1`: 预处理 ST 表，`f[i][j]` 表示区间 $[i, i + 2^j - 1]$ 的与值。
- `Step 2`: 处理询问，二分 $r$。
- `Step 3`: 使用 ST 表判断 $[l, r]$ 区间的与值是否符合要求。

---

### CODE

```c++
#include <bits/stdc++.h>
using namespace std;
const int logn = 30;
const int N = 2e5 + 10;
int f[N + 1][logn + 5], Logn[N + 1];
int ans[N + 1], cnt;
 
void pre() {
	Logn[1] = 0;
	Logn[2] = 1;
	for (int i = 3; i < N; i++) {
		Logn[i] = Logn[i / 2] + 1;
	}
}
 
int main() {
	pre();
	int t; scanf("%d", &t);
	while (t--) {
		int n; scanf("%d", &n);
		for (int i = 1; i <= n; i++) scanf("%d", &f[i][0]);
		for (int j = 1; j <= logn; j++) {
			for (int i = 1; i + (1 << j) - 1 <= n; i++) {
				f[i][j] = f[i][j - 1] & f[i + (1 << (j - 1))][j - 1];
			}
		}
		int q; scanf("%d", &q);
		while (q--) {
			int l, k; scanf("%d%d", &l, &k);
			if (f[l][0] < k) ans[++cnt] = -1;
			else {
				int L = l, R = n;
				while (L < R) {
					int mid = (L + R + 1) / 2;
					int s = Logn[mid - l + 1];
					int tmp = f[l][s] & f[mid - (1 << s) + 1][s];
					if (tmp >= k) L = mid;
					else R = mid - 1;
				}
				ans[++cnt] = L;
			}
		}
	}
	for (int i = 1; i <= cnt; i++) printf("%d ", ans[i]);
	return 0;
}
```
