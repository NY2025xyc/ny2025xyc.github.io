---
layout: post
title: "[ABC255f]Pre-order and In-order 题解"
date:   2023-06-22
comments: true
toc: true
tags: [题解]
author: NY2025xyc
---

> 第一篇题解，也便搬运过来吧

更好的阅读体验，[点此进入](https://www.luogu.com.cn/blog/NY2025/solution-at-abc255-f1)

#### 题目传送门

[[ABC255F]Pre-order and In-order](https://www.luogu.com.cn/problem/AT_abc255_f)

#### 思路

常识：根据前序排列和中序排列，可以确定一棵二叉树。

众所周知，前序排列的第一个元素，即为二叉树的根节点。在中序排列中找到相应根节点的位置 $k$（这一步可以在预处理中进行），左侧区间 $1\sim k - 1$ 构成左子树，右侧区间 $k+1\sim n$ 构成右子树。在前序排列中相应地将左子树、右子树按中序中的长度切出来，再递归构造左右子树即可。

无法构造的情况：

- 主根不为 $1$（前序遍历首元素不为 $1$）
- $k$ 不在指定递归区间内

这部分的代码：

```c++
int MakePost(int l1, int r1, int l2, int r2) {
	if (l1 > r1 || l2 > r2) return 0;
	if (l1 == r1 || l2 == r2) return pre[l1]; //边界条件
	int k = pos[pre[l1]];
	if (k > r2 || k < l2) {
		printf("%d", -1);
		exit(0);
	}//如果找到的根节点位置不在指定区间内，说明无法构造二叉树，返回-1
	int len = k - l2;//左子树元素数量
	l[pre[l1]] = MakePost(l1 + 1, l1 + len, l2, l2 + len - 1);//递归构造左子树
	r[pre[l1]] = MakePost(l1 + len + 1, r1, l2 + len + 1, r2);//递归构造右子树
	return pre[l1];//返回根节点
}
```

然后一切就结束了，输出即可。

#### 完整代码

```c++
#include <bits/stdc++.h>
using namespace std;

const int N = 2e5 + 10;
int pre[N], in[N], l[N], r[N], pos[N];

int MakePost(int l1, int r1, int l2, int r2) {
	if (l1 > r1 || l2 > r2) return 0;
	if (l1 == r1 || l2 == r2) return pre[l1];
	int k = pos[pre[l1]];
	if (k > r2 || k < l2) {
		printf("%d", -1);
		exit(0);
	}
	int len = k - l2;
	l[pre[l1]] = MakePost(l1 + 1, l1 + len, l2, l2 + len - 1);
	r[pre[l1]] = MakePost(l1 + len + 1, r1, l2 + len + 1, r2);
	return pre[l1];
}

int main() {
	int n; scanf("%d", &n);
	for (int i = 1; i <= n; i++) scanf("%d", pre + i);
	for (int i = 1; i <= n; i++) scanf("%d", in + i), pos[in[i]] = i;
	if (pre[1] != 1) {
		printf("%d", -1);
		return 0;
	}
	MakePost(1, n, 1, n);
	for (int i = 1; i <= n; i++) printf("%d %d\n", l[i], r[i]);
	return 0;
}
```
